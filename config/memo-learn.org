#+title:  Emacs Lisp Configuration
#+author: Dancewhale
#+date:   2024-09-18
#+tags: memo fsrs learn lisp

#+description: configuring Emacs for Fsrs learning.
#+property:    header-args:emacs-lisp  :tangle yes
#+auto_tangle: vars:org-babel-tangle-comment-format-beg:org-babel-tangle-comment-format-end t

A literate programming file for configuring Emacs for Lisp programming.

#+name: head
#+begin_src emacs-lisp :comments link :exports none
;;; memo-learn --- configuring Emacs for Fsrs learning. -*- lexical-binding: t; -*-
;;
;; © 2022-2023 Dancewhale
;;   Licensed under a Creative Commons Attribution 4.0 International License.
;;   See http://creativecommons.org/licenses/by/4.0/
;;
;; Author: Dancewhale
;; Maintainer: Dancewhale
;; Created: Sep 18, 2024
;;
;; This file is not part of GNU Emacs.
;;
;; *NB:* Do not edit this file. Instead, edit the original literate file at memo-learn.org:
;;
;;; Code:
  #+end_src

  #+RESULTS: head

* Introduction
用来配置间隔学习的相关配置.
* memo
安装memo 包.
#+name: memo
#+begin_src emacs-lisp :comments link
(straight-use-package '(memo :type git :host github
                             :repo "dancewhale/memo" :files (:defaults "golib" "libmemo.so")))

(straight-use-package 'ov)

(defun memo-open-package-dir ()
  (interactive)
  (dired "/Users/whale/.emacs.d/.local/straight/repos/memo/"))

;; setting config for memo.
(general-define-key
    "s-e l RET"    'memo-create-head
    "s-e l n"      'memo-create-virt-head
    "s-e l p"      'memo-sync-file
    "s-e l P"      'memo-sync-db
    "s-e l b"      'memo-goto-org
    "s-e l s"      'memo-goto-source-direct
    "s-e l S"      'memo-suspend-current-note
    "s-e l r"      'memo-review-note
    "s-e l f"      'memo-flip-note
    "s-e l 1"      'memo-review-easy
    "s-e l 2"      'memo-review-good
    "s-e l 3"      'memo-review-hard
    "s-e l 4"      'memo-review-again
    "s-e l k"      'memo-skip-current-review-note
    "s-e l h"      'memo-open-package-dir
    "s-e l c"      'memo-cloze-dwim
    "s-e l C"      'memo-uncloze-dwim
)


(setq memo-org-directory "/Users/whale/Seafile/Dropbox/memo")
(setq memo-db-path "/Users/whale/")
(setq memo-bridge-server-port 23456)
(setq memo-treemacs-virtual-head-expand-depth 2)

(setq memo-log-level "0")
;; 保存文件后自动更新memo 记录
(add-hook 'after-save-hook 'memo-sync-file)


;; setting keybind for memo-annotation-region-mode
(evil-define-minor-mode-key 'normal 'memo-annotation-region-mode
  (kbd "<right>") 'memo-annotation-region-expand-right
  (kbd "<left>") 'memo-annotation-region-expand-left
  (kbd "S-<right>") 'memo-annotation-region-shrink-right
  (kbd "S-<left>") 'memo-annotation-region-shrink-left
  (kbd "<up>") 'memo-annotation-region-expand-up
  (kbd "<down>") 'memo-annotation-region-expand-down
  (kbd "S-<up>") 'memo-annotation-region-shrink-up
  (kbd "S-<down>") 'memo-annotation-region-shrink-down

  (kbd "RET") 'memo-annotation-region-confirm
  (kbd "<escape>") 'memo-annotation-region-cancel


  (kbd "h") 'memo-annotation-region-expand-left
  (kbd "l") 'memo-annotation-region-expand-right
  (kbd "H") 'memo-annotation-region-shrink-right
  (kbd "L") 'memo-annotation-region-shrink-left
  (kbd "k") 'memo-annotation-region-expand-up
  (kbd "j") 'memo-annotation-region-expand-down
  (kbd "K") 'memo-annotation-region-shrink-up
  (kbd "J") 'memo-annotation-region-shrink-down
)


#+end_src

* ai
** aidermacs
#+name: aidermacs
#+begin_src emacs-lisp  :comments link
(straight-use-package 'aidermacs)

(use-package aidermacs
  :bind (("C-c a" . aidermacs-transient-menu))
  ; Set API_KEY in .bashrc, that will automatically picked up by aider or in elisp
  ; defun my-get-openrouter-api-key yourself elsewhere for security reasons
  :custom
  ; See the Configuration section below
  (aidermacs-use-architect-mode t)
  (aidermacs-default-model "deepseek/deepseek-chat")
  (aidermacs-editor-model "deepseek/deepseek-chat"))
#+end_src

* activities
#+name: activities
#+begin_src emacs-lisp  :comments link
(straight-use-package 'activities)

(use-package activities
  :init
  (activities-mode)
  (activities-tabs-mode)
  ;; Prevent `edebug' default bindings from interfering.
  (setq edebug-inhibit-emacs-lisp-mode-bindings t)

  :bind
  (("C-x C-a C-n" . activities-new)
   ("C-x C-a C-d" . activities-define)
   ("C-x C-a C-a" . activities-resume)
   ("C-x C-a C-s" . activities-suspend)
   ("C-x C-a C-k" . activities-kill)
   ("C-x C-a RET" . activities-switch)
   ("C-x C-a b" . activities-switch-buffer)
   ("C-x C-a g" . activities-revert)
   ("C-x C-a l" . activities-list)))
#+end_src



* treemacs
设置相关的package
#+name: evil-treemacs
#+begin_src emacs-lisp  :comments link
  (straight-use-package 'treemacs-evil)
#+end_src



设置相关的快捷键
#+name: treemacs
#+begin_src emacs-lisp :comments link :exports none
(use-package treemacs
  :bind (;; :bind keyword also implicitly defers treemacs itself.
         ;; Keybindings before :map is set for global-map.
         ("s-e o" . treemacs-select-window)
         ("s-e t f" . treemacs-select-directory)))

    #+end_src

* go-translate
#+name: go-translate
#+begin_src emacs-lisp  :comments link
(straight-use-package 'go-translate)
(straight-use-package 'plz)

(require 'go-translate)
(require 'plz)

(setq gt-langs '(en zh))

;;(setq gt-chatgpt-host "https://api.deepseek.com")
;;(setq gt-chatgpt-model "deepseek-chat")
;;(setq gt-default-translator (gt-translator :engines (gt-chatgpt-engine :key "sk-03532a4530844ea780410490e04782d5")))
(setq gt-preset-translators
      `((ts-1 . ,(gt-translator
                  :taker (gt-taker :langs '(en zh) :text 'word)
                  :engines (gt-bing-engine)
                  :render (gt-insert-render)))
        (ts-2 . ,(gt-translator
                  :taker (gt-taker :langs '(en zh) :text 'sentence)
                  :engines (gt-google-engine)
                  :render (gt-insert-render)))
        (ts-3 . ,(gt-translator
                  :taker (gt-taker :langs '(en zh) :text 'buffer
                                   :pick 'word :pick-pred (lambda (w) (length> w 6)))
                  :engines (gt-google-engine)
                  :render (gt-overlay-render :type 'help-echo)))))
#+end_src



* Technical Artifacts                                :noexport:
Let's =provide= a name so we can =require= this file:

#+name: end
#+begin_src emacs-lisp :comments link :exports none
(provide 'memo-learn)
;;; memo-learn.el ends here
  #+end_src
