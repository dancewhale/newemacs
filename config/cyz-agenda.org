#+title:  Agenda View Setting
#+author: Dancewhale
#+date:   2024-12-16
#+tags: emacs org

A literate programming file for configuring org agenda view.

#+begin_src emacs-lisp :exports none
  ;;; cyz-agenda --- Configuring org for capturing notes. -*- lexical-binding: t; -*-
  ;;
  ;; © 2020-2024 Dancewhale
  ;;   Licensed under a Creative Commons Attribution 4.0 International License.
  ;;   See http://creativecommons.org/licenses/by/4.0/
  ;;
  ;; Author: Dancewhale
  ;; Maintainer: Dancewhale
  ;; Created: 2024-12-16
  ;;
  ;; This file is not part of GNU Emacs.
  ;;
  ;; *NB:* Do not edit this file. Instead, edit the original literate file at:
  ;;            ~/other/emacs.d/config/agenda.org
  ;;       And tangle the file to recreate this one.
  ;;
  ;;; Code:
#+end_src
* Introduction
这个配置文件用来配置我的agenda 相关配置.
* agenda 文件引入和跳转 
引入org-starter 包用来管理agenda file 的list.
#+name: org-starter
#+begin_src emacs-lisp  :comments link
  (straight-use-package 'org-starter)

  (use-package org-starter
    :config
    (org-starter-def "~/Dropbox/roam/gtd/"
      :files
      ("inbox.org"              :agenda t  :key "i" :refile (:maxlevel . 1))
      ("org-gtd-tasks.org"              :agenda t  :key "t" :refile (:maxlevel . 1))
      ))

  (general-define-key
    "C-c a"    #'org-agenda
    "s-e j i"  #'org-starter-find-file-by-key)
#+end_src
    
* org-gtd
#+name: gtd
#+begin_src emacs-lisp  :comments link
(straight-use-package 'org-gtd)
(require 'org-gtd)

(general-define-key
    "C-c n n"    #'org-gtd-capture
    "C-c n p"    #'org-gtd-process-inbox
    "C-c n o"    #'org-gtd-organize
    "C-c n e"    #'org-gtd-engage
    )

(setq org-gtd-directory (expand-file-name "~/Dropbox/roam/gtd"))
(setq org-gtd-update-ack "3.0.0")
#+end_src

* org-super-agenda | org-sql
安装对应的包
#+name: super-agenda-package
#+begin_src emacs-lisp  :comments link
  (straight-use-package 'org-super-agenda)
  (straight-use-package 'org-sql)
  (require 'org-super-agenda)
  (require 'org-sql)
#+end_src

设置对应的keyword
#+name: org-todo-keyword
#+begin_src emacs-lisp  :comments link
(setq org-todo-keywords
        '((sequence
           "TODO(t)"  ; A task that plan todo.
           "PROJ(p)"  ; An ongoing project that cannot be completed in one step
           "NEXT(n!)"  ; Something that is doing today.
           "WAIT(w@/!)"  ; Task should wait for some condition for ready.
           "|"
           "DONE(d!)"  ; Task successfully completed
           "CANCELED(c@/!)") ; Task was cancelled, aborted or is no longer applicable
          (sequence
           "QUESTION(q)"
           "NOTE(N)"
           "IDEA(i)"
           )))
   #+end_src



#+name:  super-agenda-config
#+begin_src emacs-lisp  :comments link
  (use-package org-super-agenda
    :config
    (add-hook 'after-init-hook 'org-super-agenda-mode)
    (require 'org-habit)
    (setq
     org-agenda-skip-scheduled-if-done t
     org-agenda-skip-deadline-if-done t
     org-agenda-include-deadlines t
     org-agenda-include-diary t
     org-agenda-block-separator nil
     org-agenda-compact-blocks t
     org-agenda-skip-additional-timestamps-same-entry t
     org-agenda-start-with-log-mode t)
  )

(setq org-agenda-custom-commands
      '(("z" "Super zaen view"
         ((alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do"
                                 :todo "NEXT"
                                 :order 1)
                          (:name "Important"
                                 :tag "Important"
                                 :priority "A"
                                 :order 6)
                          (:name "Due Today"
                                 :deadline today
                                 :order 2)
                          (:name "Due Soon"
                                 :deadline future
                                 :order 8)
                          (:name "Overdue"
                                 :deadline past
                                 :order 7)
                          (:name "Assignments"
                                 :tag "Assignment"
                                 :order 10)
                          (:name "Issues"
                                 :tag "Issue"
                                 :order 12)
                          (:name "Projects"
                                 :tag "Project"
                                 :order 14)
                          (:name "Work"
                                 :tag "Work"
                                 :order 9)
                          (:name "Emacs"
                                 :tag "Emacs"
                                 :order 13)
                          (:name "Research"
                                 :tag "Research"
                                 :order 15)
                          (:name "Waiting"
                                 :todo "WAIT"
                                 :order 20)
                          (:name "trivial"
                                 :priority<= "C"
                                 :tag ("Trivial" "Unimportant")
                                 :todo ("SOMEDAY" )
                                 :order 90)))))))))

#+end_src


* org-clock
** org-mru-clock
这个包支持选择clock 的历史历史记录
#+name: org-mru-clock
#+begin_src emacs-lisp  :comments link
  (straight-use-package 'org-mru-clock)

;; 支持clock 信息保存.
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate)
  ;; Change task state to STARTED when clocking in
  (setq org-clock-in-switch-to-state "NEXT")
  ;; Removes clocked tasks with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks t)
#+end_src


** Tasks auto clock when start
[[https://janusworx.com/blog/what-i-learned-today-2023-02-10/][Mario Braganza]] had an interesting idea of starting the clock when a task changes to /in progress/:
#+name: org-todo-clock
#+begin_src emacs-lisp
  (defun cyz-org-clock-todo-change ()
    "Called from hook `org-after-todo-state-change-hook'.
  Clock in if a task changes to DOING (i.e. IN_PROGRESS),
  and clocks out with any other state change."
    (if (string= org-state "DOING")
        (org-clock-in)
      (org-clock-out-if-current)))

  (add-hook 'org-after-todo-state-change-hook 'cyz-org-clock-todo-change)
#+end_src
And I would like to have cute little icons for those states:




* Technical Artifacts                                :noexport:
Let's provide a name so we can =require= this file.
#+begin_src emacs-lisp :exports none
  (provide 'cyz-agenda)
  ;;; cyz-agenda.el ends here
#+end_src

Before you can build this on a new system, make sure that you put the cursor over any of these properties, 
and hit: ~C-c C-c~

#+description: A literate programming file for configuring org agenda view.

#+property:    header-args:sh :tangle no
#+property:    header-args:emacs-lisp :tangle yes
#+property:    header-args    :results none :eval no-export :comments no mkdirp yes

#+options:     num:nil toc:t todo:nil tasks:nil tags:nil date:nil
#+options:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+infojs_opt:  view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
