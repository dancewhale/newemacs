#+description: A literate programming file for bootstrapping my environment.
#+auto_tangle: vars:org-babel-tangle-comment-format-beg:org-babel-tangle-comment-format-end t
#+property:    header-args:emacs-lisp  :tangle yes

* Global setting
** dir setting
#+name: dir
#+begin_src emacs-lisp  :comments link
(defvar emacs-local-dir (expand-file-name ".local/"))
;;配置文件
(defvar emacs-data-dir (file-name-concat emacs-local-dir "etc/"))

;;临时文件
(defvar emacs-cache-dir (file-name-concat emacs-local-dir "cache/"))
(defvar emacs-data-dir (file-name-concat emacs-local-dir "state/"))
(setq package-user-dir (concat emacs-local-dir "elpa/"))

(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
   #+end_src

** key map
#+name: global
#+begin_src emacs-lisp :comments link
(straight-use-package 'general)
(require 'general)
(general-define-key
    "s-f s-f"    'View-scroll-half-page-forward
    "s-f s-b"    'View-scroll-half-page-backward
    "C-c l"      'org-store-link
)

(general-define-key
  :keymaps 'ivy-minibuffer-map
    "C-w"  'evil-delete-backward-word)
(general-define-key
  :keymaps 'minibuffer-mode-map
    "C-w"  'evil-delete-backward-word)
#+end_src

** undo
*** vundo
#+name: vundo
#+begin_src emacs-lisp :comments link
  (straight-use-package 'vundo)
    #+end_src

*** undo-tree
#+name: undo-tree
#+begin_src emacs-lisp :comments link
  (straight-use-package 'undo-tree)

    #+end_src

*** undo-fu
#+name: undo-fu
#+begin_src emacs-lisp :comments link
  (straight-use-package 'undo-fu)

    #+end_src

* Keyboard Bindings
** evil
*** evil
[[file:docs/evil.org][evil-guide]] from noctuid
#+name: evil
#+begin_src emacs-lisp :comments link
(setq evil-want-keybinding nil)
(setq evil-auto-indent nil)
(straight-use-package 'evil)
(straight-use-package 'goto-chg)
(require 'evil)
(evil-mode 1)

(evil-define-minor-mode-key 'insert 'lsp-mode
  (kbd "TAB") 'completion-at-point
)

(evil-define-key nil evil-motion-state-map
  (kbd "C-a") 'evil-beginning-of-line
  (kbd "C-e") 'evil-end-of-line
)

(evil-define-key nil evil-insert-state-map
  (kbd "C-a") 'beginning-of-line
  (kbd "C-e") 'end-of-line
  (kbd "C-n") 'next-line
  (kbd "C-p") 'previous-line
)

#+end_src

*** evil-collection
#+name: evil-collection
#+begin_src emacs-lisp  :comments link
  (straight-use-package 'evil-collection)

  (setq evil-want-integration t)

  (when (require 'evil-collection nil t)
  (evil-collection-init))
    #+end_src

*** org-evil
[[file:docs/org-evil.org::*org-evil][org-evil 的试用说明]]
#+name: org-evil
#+begin_src emacs-lisp  :comments link
  (straight-use-package '(org-evil :build (:not compile)))
  (require 'org-evil)
    #+end_src

*** evil-surround
[[file:docs/evil-surround.org::*evil-surround Usage][evil-surround 使用说明]]
#+name: evil-surround
#+begin_src emacs-lisp  :comments link
  (straight-use-package 'evil-surround)
  (global-evil-surround-mode 1 )

    #+end_src

** which-key
#+name: which-key
#+begin_src emacs-lisp :comments link
(straight-use-package 'which-key)
(require 'which-key)
;;(setq which-key-idle-delay 0.1)
(which-key-mode)
#+end_src

** hydra
#+begin_src emacs-lisp :comments link
(straight-use-package 'major-mode-hydra)
(require 'major-mode-hydra)
(use-package hydra
  :config
  (defhydra hydra-window-resize (:color blue :hint nil) "
_w_: select _m_: move/swap _u_: undo  _^_: taller (t)  _+_: text larger
_j_: go up  _d_: delete    _U_: undo+ _v_: shorter (T) _-_: text smaller
_k_: down   _e_: balance   _r_: redo  _>_: wider       _F_: font larger
_h_: left   _n_: v-split   _R_: redo+ _<_: narrower    _f_: font smaller
_l_: right  _s_: split   _o_: only this window     _c_: choose (also 1-9)"
    ("w" ace-window)
    ("c" other-window                 :color pink) ; change window
    ("o" delete-other-windows)          ; “Only” this window
    ("d" delete-window)     ("x" delete-window)

    ;; Ace Windows ... select the window to affect:
    ("m" ace-swap-window)
    ("D" ace-delete-window)
    ("O" ace-delete-other-windows)

    ("u" winner-undo)
    ("U" winner-undo                 :color pink)
    ("C-r" winner-redo)
    ("r" winner-redo)
    ("R" winner-redo                 :color pink)

    ("J" evil-window-down            :color pink)
    ("K" evil-window-up              :color pink)
    ("H" evil-window-left            :color pink)
    ("L" evil-window-right           :color pink)

    ("j" evil-window-down)
    ("k" evil-window-up)
    ("h" evil-window-left)
    ("l" evil-window-right)

    ("x" transpose-frame)
    ("s" hydra-window-split/body)
    ("n" hydra-window-split/body)

    ("F" font-size-increase          :color pink)
    ("f" font-size-decrease          :color pink)
    ("+" text-scale-increase         :color pink)
    ("=" text-scale-increase         :color pink)
    ("-" text-scale-decrease         :color pink)
    ("^" evil-window-increase-height :color pink)
    ("v" evil-window-decrease-height :color pink)
    ("t" evil-window-increase-height :color pink)
    ("T" evil-window-decrease-height :color pink)
    (">" evil-window-increase-width  :color pink)
    ("<" evil-window-decrease-width  :color pink)
    ("." evil-window-increase-width  :color pink)
    ("," evil-window-decrease-width  :color pink)
    ("e" balance-windows)

    ("1" winum-select-window-1)
    ("2" winum-select-window-2)
    ("3" winum-select-window-3)
    ("4" winum-select-window-4)
    ("5" winum-select-window-5)
    ("6" winum-select-window-6)
    ("7" winum-select-window-7)
    ("8" winum-select-window-8)
    ("9" winum-select-window-9)

    ;; Extra bindings:
    ("q" nil :color blue)))
#+end_src

* Tools
用于做组合快捷操作的工具包.
** crux
#+name: curx
#+begin_src emacs-lisp :comments link
(straight-use-package 'crux)
#+end_src
** chezmoi
#+name: chezmoi
#+begin_src emacs-lisp :comments link
(straight-use-package 'chezmoi)
(require 'chezmoi)
#+end_src

* library
** file
#+name: f
#+begin_src emacs-lisp  :comments link
(straight-use-package 'f)
(require 'f)
#+end_src

** ht-table
#+name: ht-table
#+begin_src emacs-lisp  :comments link
(straight-use-package 'ht)
#+end_src

* my function
加载我自己的代码和函数文件.
#+name: function
#+begin_src emacs-lisp  :comments link
(use-package tangle-sync :straight nil)
(straight-use-package 'xterm-color)

(defun cyz-emacs-counsel-ag ()
  (interactive)
  (counsel-ag nil default-directory))

(general-define-key
    :prefix "s-e"
    "s-f"      '(cyz-emacs-counsel-ag :which-key "grep in current directory.")
)


(defun cyz-open-directory (dir-list)
  "Prompt user to select a directory from DIR-LIST and open it in Dired.
Argument DIR-LIST is a list of directory paths."
  (interactive (list (let ((dirs ())) ; Replace with your actual list of directories
                       (while (not (equal (car dirs) ""))
                         (setq dirs (cons (read-directory-name "Select a directory: " nil nil t)
                                          dirs)))
                       (nreverse (cdr dirs)))))
  (when dir-list
    (let ((selected-dir (completing-read "Select a directory to open: " dir-list nil t)))
      (when (and selected-dir (file-directory-p selected-dir))
        (dired selected-dir)))))



(defun learnify-open-emacsd-dir ()
  (interactive)
  (cyz-open-directory cyz--home-dirs))

(defvar cyz--home-dirs '("~/.emacs.d"
                         "~/.local/share/chezmoi"
                         "~/.emacs.d/.local/straight/repos/memo"
                         "~/.config/hypr"
                         "~/.config/kitty"))

(general-define-key
 "s-e h h" #'learnify-open-emacsd-dir)
   #+end_src
