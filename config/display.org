#+description: A literate programming file to configure the Emacs UI.
#+auto_tangle: vars:org-babel-tangle-comment-format-beg:org-babel-tangle-comment-format-end t
#+property:    header-args:emacs-lisp :tangle yes

* Introduce
A literate programming file to configure the Emacs UI.

#+begin_src emacs-lisp :comments link :exports none
;;; display --- Emacs UI configuration. -*- lexical-binding: t; -*-
;; 
;; © 2020-2023  Borrow From Howard X. Abrams <http://gitlab.com/howardabrams>
;;   Licensed under a Creative Commons Attribution 4.0 International License.
;;   See http://creativecommons.org/licenses/by/4.0/
;;
;; Author: Dancewhale
;; Maintainer: Dancewhale
;; Created: September 10, 2024
;;
;; This file is not part of GNU Emacs.
;;
;; *NB:* Do not edit this file. Instead, edit the original literate file.
;;
;;; Code:
#+end_src

Let's turn off the menu and other settings:
#+begin_src emacs-lisp :comments link
  (defun cyz-display-init ()
    (interactive)
    (when (display-graphic-p)
      (context-menu-mode 1)
      (tool-bar-mode -1)
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (horizontal-scroll-bar-mode -1)
      (setq visible-bell 1
            frame-inhibit-implied-resize t)))

  (cyz-display-init)
#+end_src

And let’s make this Emacs look more like a fancy IDE with [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]:

#+begin_src emacs-lisp :comments link
(use-package all-the-icons
  :if (display-graphic-p)
  :config
  (setq major-mode-hydra-title-generator
        '(lambda (mode)
           (let ((title (thread-last mode
                                     (symbol-name)
                                     (string-replace "-" " ")
                                     (string-replace " mode" "")
                                     (s-titleize))))
             (s-concat ; (s-repeat 5 " ")
              (all-the-icons-icon-for-mode mode :v-adjust 0.05)
              " " title " Commands")))))
#+end_src

This also expands the [[file:cyz-config.org::*Leader Sequences][Major Mode Hydra]] title sequence with a pretty icon.
* Mode Line
Let's install and load some of packages from the [[https://github.com/hlissner/doom-emacs][Doom Emacs]] project, like [[https://github.com/seagle0128/doom-modeline][doom-modeline]] and maybe the themes:
#+begin_src emacs-lisp :comments link
(use-package doom-modeline
  :init
  (setq doom-modeline-minor-modes nil
        doom-modeline-buffer-encoding nil
        doom-modeline-major-mode-color-icon t
        doom-modeline-buffer-state-icon t
        doom-modeline-buffer-modification-icon t
        doom-modeline-modal 'evil
        doom-modeline-lsp-icon t
        doom-modeline-percent-position nil)
  (doom-modeline-mode 1))
#+end_src

* Org Display
** org mode basic style
#+name: basic-style
#+begin_src emacs-lisp :comments link
(setq org-auto-align-tags nil
	org-tags-column 0
	org-ellipsis "⤵"
	org-hide-emphasis-markers t
	org-pretty-entities nil ;; can perfor ui such as "a_words" into small "awords"
	org-habit-graph-column 50
	;; Agenda styling
	org-agenda-tags-column 0
	)
#+end_src

** org-appear
允许自动隐藏org-mode 的标记符号,当光标位于符号内时,显示符号.
#+name: org-appear
#+begin_src emacs-lisp :comments link
(straight-use-package '(org-appear :type git :host github :repo "awth13/org-appear"))
(add-hook 'org-mode-hook 'org-appear-mode)
#+end_src

** org-modern
#+name: org-modern
#+begin_src emacs-lisp :comments link
  (straight-use-package 'org-modern)
  (with-eval-after-load 'org (global-org-modern-mode))
#+end_src

** org-tidy
#+name: org-tidy
#+begin_src emacs-lisp :comments link
(straight-use-package 'org-tidy)
(require 'org-tidy)
#+end_src

* Find the Bloody Cursor
Large screen, lots of windows, so where is the cursor? While I used to use =hl-line+=, I found that the prolific [[https://protesilaos.com/][Protesilaos Stavrou]] [[https://protesilaos.com/codelog/2022-03-14-emacs-pulsar-demo/][introduced his Pulsar project]] is just what I need. Specifically, I might /loose the cursor/ and need to have it highlighted (using ~F8~), but also, this automatically highlights the cursor line with specific /actions/ , like changing windows.

#+begin_src emacs-lisp :comments link
(use-package pulsar
  :straight (:host github :repo "protesilaos/pulsar")
  :custom
  (pulsar-face 'pulsar-generic)
  (pulsar-delay 0.15)

  :config
  (dolist (built-in-function '(recenter-top-bottom move-to-window-line-top-bottom reposition-window
                               bookmark-jump other-window delete-window delete-other-windows
                               forward-page backward-page scroll-up-command scroll-down-command
                               cyz-new-window tab-new tab-close tab-next org-next-visible-heading
                               org-previous-visible-heading org-forward-heading-same-level
                               org-backward-heading-same-level outline-backward-same-level
                               outline-forward-same-level outline-next-visible-heading
                               outline-previous-visible-heading outline-up-heading))
    (add-to-list 'pulsar-pulse-functions built-in-function))

  (when (fboundp 'winner-undo)
    (add-to-list 'pulsar-pulse-functions 'winner-undo)
    (add-to-list 'pulsar-pulse-functions 'winner-redo))

  (when (fboundp 'winum-select-window-1)
    (add-to-list 'pulsar-pulse-functions 'winum-select-window-1)
    (add-to-list 'pulsar-pulse-functions 'winum-select-window-2)
    (add-to-list 'pulsar-pulse-functions 'winum-select-window-3)
    (add-to-list 'pulsar-pulse-functions 'winum-select-window-4)
    (add-to-list 'pulsar-pulse-functions 'winum-select-window-5)
    (add-to-list 'pulsar-pulse-functions 'winum-select-window-6)
    (add-to-list 'pulsar-pulse-functions 'winum-select-window-7)
    (add-to-list 'pulsar-pulse-functions 'winum-select-window-8)
    (add-to-list 'pulsar-pulse-functions 'winum-select-window-9))

  (when (fboundp 'aw-delete-window)
    (add-to-list 'pulsar-pulse-functions 'aw-move-window)
    (add-to-list 'pulsar-pulse-functions 'aw-swap-window)
    (add-to-list 'pulsar-pulse-functions 'aw-copy-window)
    (add-to-list 'pulsar-pulse-functions 'aw-split-window-vert)
    (add-to-list 'pulsar-pulse-functions 'aw-split-window-horz)
    (add-to-list 'pulsar-pulse-functions 'aw-split-window-fair)
    (add-to-list 'pulsar-pulse-functions 'aw-delete-window))

  (when (fboundp 'evil-window-right)
    (add-to-list 'pulsar-pulse-functions 'evil-window-right)
    (add-to-list 'pulsar-pulse-functions 'evil-window-left)
    (add-to-list 'pulsar-pulse-functions 'evil-window-up)
    (add-to-list 'pulsar-pulse-functions 'evil-window-down))

  (pulsar-global-mode 1))
#+end_src

And if I can’t find the cursor, and don’t want to move it to see it, I can hit a key:
#+begin_src emacs-lisp :comments link
(use-package pulsar
  :bind ("<f8>" . pulsar-pulse-line))
#+end_src

* Font Configuration
[[http://blogs.adobe.com/typblography/2012/09/source-code-pro.html][Source Code Pro]]  编程字体
[[https://github.com/i-tu/Hasklig][Hasklig]]     [[https://github.com/tonsky/FiraCode][Fira]]  [[https://typeof.net/Iosevka/][Iosevka]] 
Microsoft 字体 [[https://docs.microsoft.com/en-us/windows/terminal/cascadia-code][Cascadia]] 
[[https://github.com/ryanoasis/nerd-fonts][Nerd Font project]] 
** cnfont
#+name: cnfont
#+begin_src emacs-lisp  :comments link
(straight-use-package 'cnfonts)
(require 'cnfonts)
#+end_src

** Choosing a Font
I stole the following idea from [[https://protesilaos.com/dotemacs/#h:9035a1ed-e988-4731-89a5-0d9e302c3dea][Protesilaos Stavrou's dotfile configuration]], and the following should minimally be /readable/:
#+begin_example
  | Similarities | Regular                    |
  |--------------+----------------------------|
  | ()[]{}<>«»‹› | ABCDEFGHIJKLMNOPQRSTUVWXYZ |
  | 6bB8&        | abcdefghijklmnopqrstuvwxyz |
  | 0ODdoaoOQGC  | 0123456789                 |
  | I1tilIJL     | ~!@#$%^&*+                 |
  | !¡ij         | `'"‘’“”.,;:…              |
  | 5$§SsS5      | ()[]{}—-_=<>/\            |
  | 17ZzZ2       | ΑΒΓΔΛΜΝΞΟΠΡΣΤΥΦΧΨΩ         |
  | 9gqpG6       | αβγδεζηθικλμνξοπρστυφχψω   |
  | hnmMN        |                            |
  | uvvwWuuwvy   |                            |
  | x×X          |                            |
  | .,·°%        |                            |
  | ¡!¿?         |                            |
  | :;           |                            |
  | `''"‘’“”     |                            |
  | —-~≈=≠+*_   |                            |
  | …⋯         |                            |
  | ...          |                            |

#+end_example

The following is from [[https://source-foundry.github.io/Hack/font-specimen.html][Hack's website]]:
#+begin_src c
//  The four boxing wizards jump
#include <stdio.h> // <= quickly.
int main(int argc, char **argv) {
  long il1[]={1-2/3.4,5+6==7/8};
  int OxFaced=0xBAD||"[{(CQUINE";
  unsigned O0,l1,Z2,S5,G6,B8__XY;
  printf("@$Hamburgefo%c`",'\n');
  return ~7&8^9?0:l1|!"j->k+=*w";
}
#+end_src

To install a font, I use the following command on my Mac:
#+begin_src sh
brew tap homebrew/cask-fonts
brew install --cask font-hack-nerd-font
#+end_src
** Specifying a Font
选择已安装的等宽英文字体
#+begin_src emacs-lisp
  (defvar cyz-english-font
    (when window-system
      (or
       (seq-first
        (seq-filter (lambda (font) (when (x-list-fonts font) font))
      	      '("LXGW Bright code"
                   "Iosevka"
    	        "Iosevka Nerd Font Mono"
                   "CaskaydiaCove Nerd Font"
      		"FiraCode Nerd Font"
      		"mononoki"
      		"JetBrains Mono"
                   "PragmataPro"
      		"Iosevka Nerd Font"
      		"Fantasque Sans Mono")))
       "monospaced"))
        "My fixed width font based on what I have installed.")
#+end_src
选择已安装的等宽中文字体
#+begin_src emacs-lisp
  (defvar cyz-chinese-font
    (when window-system
      (or
       (seq-first
        (seq-filter (lambda (font) (when (x-list-fonts font) font))
                    '("LXGW Bright Code"
                      "LXGW WenKai"
                      "LXGW WenKai Mono"
  		    "LXGW WenKai Mono Screen"
                      "Sarasa Term Sc Nerd"
  		    "HarmonyOS"
                      "harmonyOS Sans")))
       (warn "Cannot find a Chinese Font.  Install 等宽字体."))))
  #+end_src

设置我的中文和英文字体，为了对齐特地找的等宽英文和中文字体。
#+begin_src emacs-lisp
(defun cyz-better-font()
  (interactive)
  (if (display-graphic-p)
      (progn
        (set-face-attribute 'default nil :font cyz-english-font)
        ;; Unicode font
        ;(set-fontset-font t 'unicode (font-spec :family "Monaco Nerd Font Mono") nil 'prepend)
        ;; Solve the org bullet problem
        ;;(dolist (charset '(?\x25cb))
        ;;  (set-fontset-font nil charset (font-spec :family "MonacoB" :size 13))) ;; 14 16 20 22 28
        ;; Chinese font
        (dolist (charset '(kana han cjk-misc bopomofo))
          (set-fontset-font (frame-parameter nil 'font)
                            charset
                            (font-spec :family cyz-chinese-font)))
        (set-fontset-font t 'symbol  "Sarasa Term Sc Nerd")
)))

;; 支持字体大小修改
(require 'textsize)

#+end_src

* Themes
加载我喜欢的theme, install ef-themes
设置org-mode 的head 字体大小.
#+name: ef-themes
#+begin_src emacs-lisp :comments link
(use-package ef-themes
  :config
  (setq ef-themes-mixed-fonts nil
        ef-themes-variable-pitch-ui nil)
  (mapc  #'disable-theme custom-enabled-themes)
  (load-theme 'ef-melissa-light :no-confirm)
 )
#+end_src



Most of the time, Emacs is on my desk is a darkened room, so I choose the dark theme:

#+begin_src emacs-lisp :comments link
(defun laptop-inside ()
  "Customize the theme for inside programming."
  (interactive)
  (mapc  #'disable-theme custom-enabled-themes)
  (disable-theme 'ef-melissa-light)
  (load-theme 'ef-maris-dark t)
  ;; turn on the line highlighting:
  (global-hl-line-mode 1)
)
#+end_src

But, when feeling adventurous, I /sometimes/ take my laptop outside:

#+begin_src emacs-lisp :comments link
(defun laptop-in-the-sun ()
  "Customize the theme for outside programming."
  (interactive)
  (mapc  #'disable-theme custom-enabled-themes)
  (disable-theme 'ef-melissa-dark)
  (load-theme 'ef-melissa-light t)
  (global-hl-line-mode -1)
  (set-face-attribute 'default nil :foreground "#0c0906")
  (set-face-attribute 'region nil :background "orange")
  (set-face-attribute 'org-block nil :background "#f2f1ef")
  (set-face-attribute 'org-block-begin-line nil :foreground "#999491" :background "#e5e4e3"))
#+end_src

I’ve been playing around with making the current window more pronounced.
This isn’t needed as much with the [[*Window Dimmer][Window Dimmer]] feature, but if I do, this would be the settings:

#+begin_src emacs-lisp :comments link :tangle no
(set-face-attribute 'mode-line nil :background "#cccccc")
(set-face-attribute 'mode-line-inactive nil :background "#888888")
#+end_src

** Highlight Task Labels
In code, if you drop a specific /text/ labels, we can highlight them with [[https://github.com/tarsius/hl-todo][hl-todo package]]:

#+begin_src emacs-lisp :comments link
(use-package hl-todo
  :straight (:host github :repo "tarsius/hl-todo")
  :init
  (setq hl-todo-keyword-faces
    `(("TODO"   . ,(face-foreground 'warning))
      ("FIXME"  . ,(face-foreground 'error))
      ("NOTE"   . ,(face-foreground 'success))))
  (global-hl-todo-mode 1))
#+end_src

This means that comments like the following visually standout:
TODO Attempt to validate that this shows something I need to do.

Suggests to bind some keys to =hl-todo-next= in order to jump from tag to tag, but the [[https://github.com/liuyinz/consult-todo][consult-todo]] implements that in a more visual way:

#+begin_src emacs-lisp :comments link
(use-package consult-todo
  :init
  (defconst consult-todo--narrow
    '((?t . "TODO")
      (?f . "FIXME")
      (?n . "NOTE"))
    "Mapping of narrow and keywords.")
  :general (:states 'normal "g t" '("jump todos" . consult-todo)))
#+end_src

* Full Size Frame
Taken from [[https://emacsredux.com/blog/2020/12/04/maximize-the-emacs-frame-on-startup/][this essay]], I figured I would start the initial frame automatically in fullscreen, but not any subsequent frames (as this could be part of the capturing system).
#+begin_src emacs-lisp :comments link
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

But when capturing, I subsequently open smaller frames that shouldn’t be /odd looking/:
#+begin_src emacs-lisp :comments link
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
#+end_src

Now that I’m using v29 of Emacs, I can /un-decorate/ the non-full-sized frames:
#+begin_src emacs-lisp :comments link
(add-to-list 'default-frame-alist '(undecorated-round . t))
#+end_src

* Emojis, Icons and Whatnot
Display these two symbols as one:
#+begin_src emacs-lisp :comments link
(add-hook 'text-mode-hook (lambda ()
                            (dolist (pair '(("!?" . "‽")
                                            ("ae" . "æ")
                                            ("AE" . "Æ")

                                            ;; If we have ligatures, why these?
                                            ;; ("->" . ?→)
                                            ;; ("<-" . ?←)
                                            ;; ("=>" . ?⇒)
                                            ))
                              (push pair prettify-symbols-alist))))
#+end_src

And turn the prettifier on:
#+begin_src emacs-lisp :comments link
(global-prettify-symbols-mode 1)
#+end_src

In Emacs 28.1, we have better Unicode 14 support. Which means, we need to install [[https://github.com/googlefonts/noto-emoji][Noto Color Emoji]]. My systems, seems to work fine, but I’m leaving this code here in case I have issues, as I might use what Apple supplies when on a Mac (thanks [[http://xahlee.info/emacs/emacs/emacs_list_and_set_font.html][Xah Lee]]):
#+begin_src emacs-lisp :comments link
;; set font for emoji (should come after setting symbols)
(set-fontset-font t 'emoji
 (cond
  ((member "Apple Color Emoji" (font-family-list)) "Apple Color Emoji")
  ((member "Noto Color Emoji" (font-family-list)) "Noto Color Emoji")
  ((member "Symbola" (font-family-list)) "Symbola")))
#+end_src
Test this out: 😄 😱 😸 👸 👽 🙋

Not use what I'm doing with the [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] package, but the Doom Modeline uses much of this.
#+begin_src emacs-lisp :comments link
(use-package all-the-icons)
#+end_src
*Note:* Install everything with the function, =all-the-icons-install-fonts=.
* Ligatures
Seems like getting ligatures to work in Emacs has been a Holy Grail. On Mac, I've used special builds that have hacks, but now with Emacs 27 and Harfbuzz, I should be able to get --> to look like it should.

#+begin_src emacs-lisp :comments link :tangle no
(setq prettify-symbols-unprettify-at-point 'right-edge)

(global-prettify-symbols-mode +1)
(prettify-symbols-mode +1)
#+end_src

We'll start using that instead, but setting this [[file:cyz-programming.org::*Ligatures][over here]] in the programming section.

Also note that adding a /little/ extra space between lines makes text files easier to read.
#+begin_src emacs-lisp :comments link
(add-hook 'text-mode-hook (lambda () (setq-local line-spacing 0.1)))
#+end_src
* Technical Artifacts :noexport:

Let's =provide= a name so we can =require= this file:
#+begin_src emacs-lisp :comments link :exports none
(provide 'cyz-display)
;;; cyz-display.el ends here
#+end_src

Before you can build this on a new system, make sure that you put the cursor over any of these properties, and hit: ~C-c C-c~
