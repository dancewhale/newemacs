#+title:  Capturing Notes with Org
#+author: Dancewhale
#+date:   2024-12-16
#+tags: emacs org

A literate programming file for configuring org for capturing notes.

#+begin_src emacs-lisp :exports none
  ;;; capturing-notes --- Configuring org for capturing notes. -*- lexical-binding: t; -*-
  ;;
  ;; © 2020-2024 Dancewhale
  ;;   Licensed under a Creative Commons Attribution 4.0 International License.
  ;;   See http://creativecommons.org/licenses/by/4.0/
  ;;
  ;; Author: Howard X. Abrams <http://gitlab.com/howardabrams>
  ;; Maintainer: Dancewhale
  ;; Created: 2024-12-16
  ;;
  ;; This file is not part of GNU Emacs.
  ;;
  ;; *NB:* Do not edit this file. Instead, edit the original literate file at:
  ;;            ~/other/emacs.d/config/capturing-notes.org
  ;;       And tangle the file to recreate this one.
  ;;
  ;;; Code:
#+end_src
* Introduction
构建capture 的函数和模板,复制org-protocol-capture 函数,然后修改body 的处理逻辑,将body 改为file
不从命令行读取,而是直接从文件file 加载,从而跳过终端上' "" 等字符的处理问题.
#+name: capture
#+begin_src emacs-lisp  :comments link
(require 'org-protocol)

(add-to-list  'org-capture-templates
           '("w" "Web Note" entry
             (file "~/Dropbox/memo/Web.org")
             "* %a    :website:\n%i"))

(add-to-list 'org-protocol-protocol-alist
             '("Capture file"
               :protocol "capture-file"
               :function org-protocol-capture-file))


(defun org-protocol-capture-file (info)
  "Process an org-protocol://capture style url with INFO with file."
  (let* ((parts
          (pcase (org-protocol-parse-parameters info)
            ;; New style links are parsed as a plist.
            ((let `(,(pred keywordp) . ,_) info) info)
            ;; Old style links, with or without template key, are
            ;; parsed as a list of strings.
            (p
             (let ((k (if (= 1 (length (car p)))
                          '(:template :url :title :file)
                        '(:url :title :file))))
               (org-protocol-assign-parameters p k)))))
         (template (or (plist-get parts :template)
                       org-protocol-default-template-key))
         (url (and (plist-get parts :url)
                   (org-protocol-sanitize-uri (plist-get parts :url))))
         (type (and url
                    (string-match "^\\([a-z]+\\):" url)
                    (match-string 1 url)))
         (title (or (plist-get parts :title) ""))
         (file (or (plist-get parts :file) ""))
         (content (with-temp-buffer (insert-file-contents  file) (buffer-string))) 
         (orglink
          (if (null url) title
            (org-link-make-string url (or (org-string-nw-p title) url))))
         ;; Avoid call to `org-store-link'.
         (org-capture-link-is-already-stored t))
    ;; Only store link if there's a URL to insert later on.
    (when url (push (list url title) org-stored-links))
    (org-link-store-props :type type
                          :link url
                          :description title
                          :annotation orglink
                          :initial content
                          :query parts)
    (raise-frame)
    (org-capture nil template)
    (message "Item captured.")
    ;; Make sure we do not return a string, as `server-visit-files',
    ;; through `server-edit', would interpret it as a file name.
    nil))


#+end_src

#+name: org-task-template
#+begin_src emacs-lisp  :comments link
(add-to-list 'org-capture-templates
             '("n" "Thought or Note"  entry
               (file+olp org-default-notes-file "General Notes")
               "* %?\n  %i\n  See: %a" :empty-lines 1))

(add-to-list 'org-capture-templates
             '("t" "Task"  entry
               (file+olp org-default-tasks-file "Tasks")
               "** TODO %?" :empty-lines 1))

#+end_src



* Technical Artifacts                                :noexport:
Let's provide a name so we can =require= this file.
#+begin_src emacs-lisp :exports none
  (provide 'capturing-notes)
  ;;; capturing-notes.el ends here
#+end_src

Before you can build this on a new system, make sure that you put the cursor over any of these properties, 
and hit: ~C-c C-c~

#+description: A literate programming file for configuring org for capturing notes.

#+property:    header-args:sh :tangle no
#+property:    header-args:emacs-lisp :tangle yes
#+property:    header-args    :results none :eval no-export :comments no mkdirp yes

#+options:     num:nil toc:t todo:nil tasks:nil tags:nil date:nil
#+options:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+infojs_opt:  view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
