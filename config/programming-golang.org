#+title:  Emacs Lisp Configuration
#+author: Dancewhale
#+date:   2024-12-09
#+tags: emacs programming golang

#+description: configuring Emacs for Golang programming.
#+property:    header-args:emacs-lisp  :tangle yes
#+auto_tangle: vars:org-babel-tangle-comment-format-beg:org-babel-tangle-comment-format-end t

A literate programming file for configuring Emacs for Golang programming.

#+begin_src emacs-lisp :comments link :exports none
;;; czy-golang --- configuring Emacs for Lisp programming. -*- lexical-binding: t; -*-
;;
;; © 2022-2023 Dancewhale
;;   Licensed under a Creative Commons Attribution 4.0 International License.
;;   See http://creativecommons.org/licenses/by/4.0/
;;
;; Author: Dancewhale
;; Maintainer: Dancewhale
;; Created: 2024-12-11
;;
;; This file is not part of GNU Emacs.
;;
;; *NB:* Do not edit this file. Instead, edit the original literate file at:
;;            /Users/dancewhale/other/hamacs/czy-lisp.org
;;       And tangle the file to recreate this one.
;;
;;; Code:
  #+end_src

* Introduction
我的工作语言
** golang
注意: 需要配置好环境变量里面的GOROOT  GOPATH  并将对应bin 目录加入PATH, 否则会报错.
*** go-mode
#+name: go-mode
#+begin_src emacs-lisp :comments link
(straight-use-package 'go-mode)

(defun cyz-go-before-save ()
  (interactive)
  (when lsp-mode
    (lsp-organize-imports)
    (lsp-format-buffer)))

(use-package go-mode
  :defer t
  :straight t
  :config
  (add-hook 'go-mode-hook 'lsp-deferred)
  (add-hook 'go-mode-hook
            (lambda ()
              (add-hook 'before-save-hook  'cyz-go-before-save))))

  #+end_src
*** ob-go
#+name: 
#+begin_src emacs-lisp  :comments link
(straight-use-package 'ob-go)
(require 'ob-go)
#+end_src


** tips
我的一些快捷设置,方便编写代码.
#+name: goland-tips
#+begin_src emacs-lisp  :comments link

  (defun cyz-open-with-goland ()
    (interactive)
    (let ((line  (number-to-string (line-number-at-pos)))
          (file  (buffer-file-name)))
      (start-process "goland" "*goland*" "goland.sh" "--line" line file)
      (when (cyz-running-on-linux?)
        (call-process "hyprctl" nil nil nil "dispatch" "workspace" "3"))
      )
    )

  (defun cyz-open-with-cursor ()
    (interactive)
    (let* ((line  (number-to-string (line-number-at-pos)))
  	(column-pos (number-to-string (current-column)))
          (file  (concat (buffer-file-name) ":" line ":" column-pos)))
      (start-process "cursor" "*cursor*" "cursor" "--goto" file)
      (when (cyz-running-on-linux?)
        (call-process "hyprctl" nil nil nil "dispatch" "workspace" "1"))
      )
    )

  (defvar cyz-tool-prefix-map (make-sparse-keymap)
    "Keymap for other tool.")

  (general-define-key
   :keymaps 'go-mode-map
   "s-e l i"    cyz-tool-prefix-map
   "s-e l i c"  #'cyz-open-with-cursor
   "s-e l i g"  #'cyz-open-with-goland)
      #+end_src



* Technical Artifacts                                :noexport:
Let's =provide= a name so we can =require= this file:

#+begin_src emacs-lisp :comments link :exports none
(provide 'czy-programming-golang)
;;; czy-programming-golang.el ends here
  #+end_src
